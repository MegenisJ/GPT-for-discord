using Discord.WebSocket;
using Discord;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using GPT_for_discord.Models;
using GPT_for_discord;
using GPT_for_discord.Services.Interfaces;
using GPT_for_discord.Handlers;

public class Program
{
    private readonly IServiceProvider _serviceProvider;
    private readonly SlashCommandHandler _slashCommandHandler;
    private readonly DiscordSocketClient discordClient;
    private readonly Setup setup = new();
    public List<Command> Commands;
    public List<GPTCommand> CustomCommands = new();

    public Program()
    {
        _serviceProvider = GPT_for_discord.Services.ServiceProvider.CreateServices();
        discordClient = _serviceProvider.GetRequiredService<DiscordSocketClient>();
        _slashCommandHandler = new SlashCommandHandler(_serviceProvider.GetRequiredService<IOpenAIProxy>(), CustomCommands);
    }

    static void Main(string[] args)
        => new Program().RunAsync(args).GetAwaiter().GetResult();

    async Task RunAsync(string[] args)
    {

        discordClient.Log += async (msg) =>
        {
            await Task.CompletedTask;
            Console.WriteLine(msg);
        };

        IConfiguration config = new ConfigurationBuilder()
            .AddJsonFile("appsettings.json")
            .AddEnvironmentVariables()
            .Build();

        Commands = setup.InitialCommands;

        await discordClient.LoginAsync(TokenType.Bot, config.GetValue<string>("Discord:token"));
        await discordClient.StartAsync();  
        discordClient.Ready += CreateSlashCommands;
        discordClient.SlashCommandExecuted += _slashCommandHandler.Handler;
        //TODO: move this implementation to a seperate file
        discordClient.ModalSubmitted += async modal =>
        {
            // Get the values of components.
            List<SocketMessageComponentData> components =
                modal.Data.Components.ToList();
            string name = components
                .First(x => x.CustomId == "ai_name").Value;
            string suffix = components
                .First(x => x.CustomId == "ai_suffix").Value;
            string prefix = components
                .First(x => x.CustomId == "ai_prefix").Value;
            CustomCommands.Add(new GPTCommand()
            {
                AiPrefix = prefix,
                AiSuffix = suffix,
                name = name
            });
            Commands.Add(new Command
            {
                builder = new SlashCommandBuilder()
                {
                    Name = name,
                    Description = "ask me anything!",
                    Options = new List<SlashCommandOptionBuilder> { new SlashCommandOptionBuilder() {
                        Name= "message",
                        Type = ApplicationCommandOptionType.String,
                        IsRequired = true,
                        Description = $"a GPT command generated by{modal.User.Username}"
            } }
                }
            });
            await CreateSlashCommands();
            // Respond to the modal.
            await modal.RespondAsync($"{modal.User.Username} Just used command builder to create custom Chat GPT requests. It may take some time to appear.");
        };
        await Task.Delay(Timeout.Infinite);
    }

    private async Task CreateSlashCommands()
    {
        foreach(var slashCommand in Commands)
        {
            await slashCommand.Create(discordClient);
        }
    }
   
}